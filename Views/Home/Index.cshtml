@{ ViewData["Title"] = "Home Page"; }


<style>
h2 {
color: #333;
font-size: 24px;
margin-bottom: 20px;
}

.task-section {
margin-bottom: 40px;
}

.task {
padding: 10px;
border: 1px solid #ccc;
background-color: #f9f9f9;
margin-bottom: 10px;
}

.task h4 {
margin-top: 0;
}

.task p {
margin-bottom: 5px;
}

.task-actions button {
margin-right: 10px;
padding: 5px 10px;
border: none;
background-color: #4CAF50;
color: #fff;
cursor: pointer;
}

.task-actions button:hover {
background-color: #45a049;
}

.form-group {
margin-bottom: 10px;
}

label {
display: block;
margin-bottom: 5px;
font-weight: bold;
}

input[type="text"] {
width: 100%;
padding: 5px;
border: 1px solid #ccc;
border-radius: 4px;
}

button[type="submit"] {
padding: 10px 20px;
border: none;
background-color: #4CAF50;
color: #fff;
cursor: pointer;
}

button[type="submit"]:hover {
background-color: #45a049;
}
</style>

<div class="text-center">
    <h1 class="display-4">Task management application</h1>
</div>


@model List<TaskViewModel>


@* List tasks *@
<div id="tasks" class="task-section">
        @foreach (var task in Model)
        {
        <h3>To Do</h3>
        <div class="task" id="view" style="display:block;">
                <p>Id: @task.Id</p>
                <p>Title: @task.Title</p>
                <p>Description: @task.Description</p>
                <p>Status: @task.Status</p>
                <p>Created By: @task.CreatedBy</p>
                <p>Assigned To: @task.AssignedTo</p>
                <p>Due Date: @task.DueDt.ToString("yyyy-MM-dd")</p>
                <div class="task-actions" id="taskactions">
                <button onclick="editTask(this, @task.Id, false)">Edit</button>
                <button onclick="deleteTask(@task.Id)">Delete</button>
                </div>
            </div>

        <div id="edit" class="edit" style="display:none;">

            <form method="post" onsubmit="return validateForm()" action="/Home/Edit/" >
                <div class="form-group">
                    <input type="text" id="Id" name="Id" value="@task.Id" class="form-control" style="display:none;" required>

                    <label for="Title">Title:</label>
                    <input type="text" id="Title" name="Title" value="@task.Title" class="form-control" required>

                    <label for="Description">Description:</label>
                    <input type="text" id="Description" name="Description" value="@task.Description" class="form-control" required>

                    <label for="Status">Status:</label>
                    <input type="text" id="Status" name="Status" value="To Do" value="@task.Status" class="form-control" readonly>
                
                    <label for="CreatedBy">CreatedBy:</label>
                    <input type="text" id="CreatedBy" name="CreatedBy" value="@task.CreatedBy"  class="form-control" required>

                    <label for="AssignedTo">AssignedTo:</label>
                    <input type="text" id="AssignedTo" name="AssignedTo" value="@task.AssignedTo" class="form-control" required>

                    <label for="DueDt">DueDt:</label>
                    <input type="date" id="DueDt" name="DueDt" value="@task.DueDt.ToString("yyyy-MM-dd")" class="form-control" required text />
                </div>

                <button type="submit" class="btn btn-primary" onclick="editTask(this, @task.Id, true)">Update</button>
                <button type="submit" class="btn btn-cancel" onclick="cancelTask(this); return false;">Cancel</button>
            </form>

            </div>
        }
</div>


<h2>Create Task</h2>

<form method="post" onsubmit="return validateForm()" action="/Home/Create/">
<div class="form-group">
        <label for="Title">Title:</label>
        <input type="text" id="Title" name="Title" class="form-control" required>

        <label for="Description">Description:</label>
        <input type="text" id="Description" name="Description" class="form-control" required>

        <label for="Status">Status::</label>
        <select id="Status" name="Status" class="form-control">
            <option value="To Do">To Do</option>
            <option value="In Progress">In Progress</option>
            <option value="Completed">Completed</option>
        </select>

        <label for="CreatedBy">CreatedBy:</label>
        <input type="text" id="CreatedBy" name="CreatedBy" class="form-control" required>

        <label for="AssignedTo">AssignedTo:</label>
        <input type="text" id="AssignedTo" name="AssignedTo" class="form-control" required>

        <label for="DueDt">DueDt:</label>
        <input type="date" id="DueDt" name="DueDt" class="form-control" required />
</div>

    <button type="submit" class="btn btn-primary">Create</button>
</form>



<script>

    //Genereate Unique Id for the tasks
    var tasks = document.querySelectorAll('.task');
    for (var i = 0; i < tasks.length; i++) {
        tasks[i].id = 'task-' + (i + 1);
    }

    var editTasks = document.querySelectorAll('.edit');
    for (var i = 0; i < editTasks.length; i++) {
        editTasks[i].id = 'edit-' + (i + 1);
    }


    var editTasks = document.querySelectorAll('.form-group');
    for (var i = 0; i < editTasks.length; i++) {
        editTasks[i].id = 'form-group-' + (i + 1);
    }

    
    // load edit task view when edit button is clicked
    function editTask(button, id, editSubmit) {

        //display the edit div if editSubmit true, if false, display task (view) div
        if (!editSubmit) {
            var viewId = button.parentNode.parentNode.id;
            var editId = viewId.replace("task", "edit");
        }
        else{

            var editId = button.parentNode.parentNode.id;
            var viewId = editId.replace("edit", "task");
           
        }

        var div = document.getElementById(viewId);
        var div2 = document.getElementById(editId);

        if (div.style.display !== 'none') {
            div.style.display = 'none';
            div2.style.display = 'block';
        }
        else {
            div.style.display = 'block';
            div2.style.display = 'none';
        }

    }

    function cancelTask(button){

        //display the task (view) div
        var editId = button.parentNode.parentNode.id;
        var viewId = editId.replace("edit", "task");

        var div = document.getElementById(viewId);
        var div2 = document.getElementById(editId);

        if (div.style.display !== 'none') {
            div.style.display = 'none';
            div2.style.display = 'block';
        }
        else {
            div.style.display = 'block';
            div2.style.display = 'none';
        }

    }

    // delete task if there's confirmation
    function deleteTask(id) {
        if (confirm("Are you sure you want to delete this task?")) {

            $.ajax({
                url: "/Home/Delete/" + id,
                type: "POST",
                success: function () {
                    location.reload();
                },
                error: function () {
                    alert("An error occurred while deleting the task.");
                }
            });
        }
    }


//validate form values
function validateForm() {
var title = document.getElementById("Title").value;
if (title == "") {
alert("Please enter a title.");
return false;
}

return true;
}
</script>